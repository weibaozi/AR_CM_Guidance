//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/KeyboardControll.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KeyboardControll: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KeyboardControll()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KeyboardControll"",
    ""maps"": [
        {
            ""name"": ""CM"",
            ""id"": ""cfcb564c-ad20-4ea1-8c75-2e043b766e6c"",
            ""actions"": [
                {
                    ""name"": ""KeyBend"",
                    ""type"": ""Value"",
                    ""id"": ""fdfc7b6e-38e9-4f0e-8d5a-cdfb3c75c4d1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""KeyDrill"",
                    ""type"": ""Button"",
                    ""id"": ""2d2f2a32-d1e2-4d5a-bcb5-8a98788a0cb4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""de3a5445-724e-4a1a-ac3c-4672a8840ae8"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyDrill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7a6469ff-301f-4abf-9265-bf5282d23d03"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyBend"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d4257513-529a-4f21-9bb6-821aa21cdaa9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyBend"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""04c7c580-5fa3-486b-ba87-c0538eda521b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyBend"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5398a581-a564-49d7-a723-24fd69913256"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyBend"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""16f5651c-75e9-490b-84fc-2c60487c2559"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyBend"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CM
        m_CM = asset.FindActionMap("CM", throwIfNotFound: true);
        m_CM_KeyBend = m_CM.FindAction("KeyBend", throwIfNotFound: true);
        m_CM_KeyDrill = m_CM.FindAction("KeyDrill", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CM
    private readonly InputActionMap m_CM;
    private List<ICMActions> m_CMActionsCallbackInterfaces = new List<ICMActions>();
    private readonly InputAction m_CM_KeyBend;
    private readonly InputAction m_CM_KeyDrill;
    public struct CMActions
    {
        private @KeyboardControll m_Wrapper;
        public CMActions(@KeyboardControll wrapper) { m_Wrapper = wrapper; }
        public InputAction @KeyBend => m_Wrapper.m_CM_KeyBend;
        public InputAction @KeyDrill => m_Wrapper.m_CM_KeyDrill;
        public InputActionMap Get() { return m_Wrapper.m_CM; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CMActions set) { return set.Get(); }
        public void AddCallbacks(ICMActions instance)
        {
            if (instance == null || m_Wrapper.m_CMActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CMActionsCallbackInterfaces.Add(instance);
            @KeyBend.started += instance.OnKeyBend;
            @KeyBend.performed += instance.OnKeyBend;
            @KeyBend.canceled += instance.OnKeyBend;
            @KeyDrill.started += instance.OnKeyDrill;
            @KeyDrill.performed += instance.OnKeyDrill;
            @KeyDrill.canceled += instance.OnKeyDrill;
        }

        private void UnregisterCallbacks(ICMActions instance)
        {
            @KeyBend.started -= instance.OnKeyBend;
            @KeyBend.performed -= instance.OnKeyBend;
            @KeyBend.canceled -= instance.OnKeyBend;
            @KeyDrill.started -= instance.OnKeyDrill;
            @KeyDrill.performed -= instance.OnKeyDrill;
            @KeyDrill.canceled -= instance.OnKeyDrill;
        }

        public void RemoveCallbacks(ICMActions instance)
        {
            if (m_Wrapper.m_CMActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICMActions instance)
        {
            foreach (var item in m_Wrapper.m_CMActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CMActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CMActions @CM => new CMActions(this);
    public interface ICMActions
    {
        void OnKeyBend(InputAction.CallbackContext context);
        void OnKeyDrill(InputAction.CallbackContext context);
    }
}
